import final_project
from unittest import mock
import pytest


def test_execute_order(capsys):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–µ—Ç–æ–¥–∞ execute_order"""
    pz = final_project.Pepperoni('XL')
    # expected = 'First we\'re making the dough, and cooking the tomato sauce;\n' \
    #            'Then we\'re rolling the dough and spreading the tomato sauce;\n'\
    #            'Finally we\'re adding pepperoni and sprinkling it with mozzarella;\n' \
    #            'Your Pizza Pepperoni of size XL is ready'
    final_project.Kitchen.execute_order(pz)
    captured = capsys.readouterr()
    assert 'Pepperoni of size XL' in captured.out


def test_bake(capsys):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤–µ—à–∏–≤–∞–Ω–∏–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ log –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é bake(...)"""
    pz_order = final_project.Hawaiian('L')

    with mock.patch('random.randint', lambda x, y: 30):
        pz_actual = final_project.bake(pz_order)
        captured = capsys.readouterr()
        assert 'üçï–ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –∑–∞ 30—Å!' in captured.out
        assert pz_actual == pz_order


def test_delivering(capsys):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤–µ—à–∏–≤–∞–Ω–∏–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ log –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é delivering(...)"""
    pz_order = final_project.Margherita('L')
    with mock.patch('random.randint', lambda x, y: 20):
        pz_delivered = final_project.delivering(pz_order)
        captured = capsys.readouterr()
        assert 'üõµ –î–æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞ 20—Å!' in captured.out
        assert pz_order == pz_delivered


def test_pickup(capsys):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–≤–µ—à–∏–≤–∞–Ω–∏–µ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ log –Ω–∞ —Ñ—É–Ω–∫—Ü–∏—é pickup(...)"""
    pz_order = final_project.Pepperoni('XL')
    with mock.patch('random.randint', lambda x, y: 25):
        pz_collected = final_project.pickup(pz_order)
        captured = capsys.readouterr()
        assert 'üè† –ó–∞–±—Ä–∞–ª–∏ –∑–∞ 25—Å!' in captured.out
        assert pz_order == pz_collected


def test_order_with_delivery(capsys):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É —Ñ—É–Ω–∫—Ü–∏–∏ order —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π"""
    pz_str = 'Margherita'
    size_str = 'L'
    need_delivery = True
    with mock.patch('random.randint', lambda x, y: 10):
        final_project.order(pz_str, size_str, need_delivery)
        captured = capsys.readouterr()
        assert 'Your Pizza Margherita of size L is ready' in captured.out
        assert 'üçï–ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –∑–∞ 10—Å!' in captured.out
        assert 'üõµ –î–æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞ 10—Å!' in captured.out


def test_order_without_delivery(capsys):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É —Ñ—É–Ω–∫—Ü–∏–∏ order –±–µ–∑ –¥–æ—Å—Ç–∞–≤–∫–∏"""
    pz_str = 'Hawaiian'
    size_str = 'L'
    need_delivery = False
    with mock.patch('random.randint', lambda x, y: 30):
        final_project.order(pz_str, size_str, need_delivery)
        captured = capsys.readouterr()
        assert 'Your Pizza Hawaiian of size L is ready' in captured.out
        assert 'üçï–ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –∑–∞ 30—Å!' in captured.out
        assert 'üè† –ó–∞–±—Ä–∞–ª–∏ –∑–∞ 30—Å!' in captured.out


def test_order_not_from_menu():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É —Ñ—É–Ω–∫—Ü–∏–∏ order –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–∏–ø–∞ –ø–∏—Ü—Ü—ã"""
    pz_str = 'Three_cheese'
    size_str = 'L'
    need_delivery = True
    with pytest.raises(ValueError):
        final_project.order(pz_str, size_str, need_delivery)


def test_menu(capsys):
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É —Ñ—É–Ω–∫—Ü–∏–∏ menu"""
    expected = '- Margherita üßÄ: [\'tomato sauce\', \'mozzarella\', \'tomatoes\']\n' \
               '- Pepperoni üçï: [\'tomato sauce\', \'mozzarella\', \'pepperoni\']\n' \
               '- Hawaiian üçç: [\'tomato sauce\', \'mozzarella\', \'chicken\', \'pineapples\']'
    final_project.menu()
    captured = capsys.readouterr()
    assert captured.out[:-1] == expected


if __name__ == '__main__':
    pass
